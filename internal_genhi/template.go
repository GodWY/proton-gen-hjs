package internal_genhi

import (
	"fmt"
	"os"
	"text/template"
)

var js = `// Code generated by protoc-gen-hjs. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.21.12
import request from '@/utils/request.js'
{{range .FD}}
/**
 * {{.Comment.FuncComment}}
 * @param {Object} data
{{- range .Comment.Params }}
 * @param {{"{"}}{{.Typ}}{{"}"}} data.{{.Key}} {{.Desc}} {{.Key}}
{{- end }}
{{- range .Comment.Response }}
 * @return {{"{"}}{{.Typ}}{{"}"}} data.{{.Key}} {{.Desc}} {{.Key}}
{{- end }}
 */
function {{.FuncName}} (data) {
	return request({
		url: '{{.Path}}',
		method: '{{.Method}}',
		data
	})
}
{{end}}

`

type TsTemplate struct {
	FD      []*FuncDesc `json:"fd"`
	FilName string      `json:"filName"`
}

type FuncDesc struct {
	FuncName string   `json:"func_name"`
	Method   string   `json:"method"`
	Path     string   `json:"path"`
	Comment  *Comment `json:"comment"`
}

type Comment struct {
	// FuncComment 函数功能描述
	FuncComment string       `json:"func_comment"`
	Params      []*ParamDesc `json:"params"`
	Response    []*ParamDesc `json:"response"`
}

type ParamDesc struct {
	Typ  string `json:"typ"`
	Key  string `json:"key"`
	Desc string `json:"desc"`
}

// Exec 执行生成代码
func Exec(ts *TsTemplate) {
	tmpl, err := template.New("js").Parse(js)
	if err != nil {
		panic(err)
	}
	fn := fmt.Sprintf("pkg/gen/js/%s.js", ts.FilName)
	file, err := os.Create(fn)
	if err != nil {
		panic(err)
	}
	// 执行模板并将结果写入标准输出
	err = tmpl.Execute(file, ts)
	if err != nil {
		panic(err)
	}
}
